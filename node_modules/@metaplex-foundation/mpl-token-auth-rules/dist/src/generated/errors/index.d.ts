type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
export declare class NumericalOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DataTypeMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DataSliceUnexpectedIndexErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class IncorrectOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PayloadVecIndexErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DerivedKeyInvalidError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PayerIsNotSignerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class NotImplementedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class BorshSerializationErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class BorshDeserializationErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ValueOccupiedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DataIsEmptyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MessagePackSerializationErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MessagePackDeserializationErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingPayloadValueError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class RuleSetOwnerMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class NameTooLongError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class OperationNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class RuleAuthorityIsNotSignerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UnsupportedRuleSetRevMapVersionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UnsupportedRuleSetVersionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UnexpectedRuleSetFailureError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class RuleSetRevisionNotAvailableError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AdditionalSignerCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PubkeyMatchCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PubkeyListMatchCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PubkeyTreeMatchCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PDAMatchCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ProgramOwnedCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ProgramOwnedListCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ProgramOwnedTreeCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AmountCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class FrequencyCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class IsWalletCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ProgramOwnedSetCheckFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare function errorFromCode(code: number): MaybeErrorWithCode;
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
