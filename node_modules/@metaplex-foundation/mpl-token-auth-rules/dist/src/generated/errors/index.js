"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.ProgramOwnedSetCheckFailedError = exports.IsWalletCheckFailedError = exports.FrequencyCheckFailedError = exports.AmountCheckFailedError = exports.ProgramOwnedTreeCheckFailedError = exports.ProgramOwnedListCheckFailedError = exports.ProgramOwnedCheckFailedError = exports.PDAMatchCheckFailedError = exports.PubkeyTreeMatchCheckFailedError = exports.PubkeyListMatchCheckFailedError = exports.PubkeyMatchCheckFailedError = exports.AdditionalSignerCheckFailedError = exports.RuleSetRevisionNotAvailableError = exports.UnexpectedRuleSetFailureError = exports.UnsupportedRuleSetVersionError = exports.UnsupportedRuleSetRevMapVersionError = exports.RuleAuthorityIsNotSignerError = exports.OperationNotFoundError = exports.NameTooLongError = exports.RuleSetOwnerMismatchError = exports.MissingPayloadValueError = exports.MissingAccountError = exports.MessagePackDeserializationErrorError = exports.MessagePackSerializationErrorError = exports.DataIsEmptyError = exports.ValueOccupiedError = exports.BorshDeserializationErrorError = exports.BorshSerializationErrorError = exports.NotImplementedError = exports.PayerIsNotSignerError = exports.DerivedKeyInvalidError = exports.PayloadVecIndexErrorError = exports.IncorrectOwnerError = exports.DataSliceUnexpectedIndexErrorError = exports.DataTypeMismatchError = exports.NumericalOverflowError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
class NumericalOverflowError extends Error {
    constructor() {
        super('Numerical Overflow');
        this.code = 0x0;
        this.name = 'NumericalOverflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NumericalOverflowError);
        }
    }
}
exports.NumericalOverflowError = NumericalOverflowError;
createErrorFromCodeLookup.set(0x0, () => new NumericalOverflowError());
createErrorFromNameLookup.set('NumericalOverflow', () => new NumericalOverflowError());
class DataTypeMismatchError extends Error {
    constructor() {
        super('Data type mismatch');
        this.code = 0x1;
        this.name = 'DataTypeMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DataTypeMismatchError);
        }
    }
}
exports.DataTypeMismatchError = DataTypeMismatchError;
createErrorFromCodeLookup.set(0x1, () => new DataTypeMismatchError());
createErrorFromNameLookup.set('DataTypeMismatch', () => new DataTypeMismatchError());
class DataSliceUnexpectedIndexErrorError extends Error {
    constructor() {
        super('Data slice unexpected index error');
        this.code = 0x2;
        this.name = 'DataSliceUnexpectedIndexError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DataSliceUnexpectedIndexErrorError);
        }
    }
}
exports.DataSliceUnexpectedIndexErrorError = DataSliceUnexpectedIndexErrorError;
createErrorFromCodeLookup.set(0x2, () => new DataSliceUnexpectedIndexErrorError());
createErrorFromNameLookup.set('DataSliceUnexpectedIndexError', () => new DataSliceUnexpectedIndexErrorError());
class IncorrectOwnerError extends Error {
    constructor() {
        super('Incorrect account owner');
        this.code = 0x3;
        this.name = 'IncorrectOwner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IncorrectOwnerError);
        }
    }
}
exports.IncorrectOwnerError = IncorrectOwnerError;
createErrorFromCodeLookup.set(0x3, () => new IncorrectOwnerError());
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError());
class PayloadVecIndexErrorError extends Error {
    constructor() {
        super('Could not index into PayloadVec');
        this.code = 0x4;
        this.name = 'PayloadVecIndexError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PayloadVecIndexErrorError);
        }
    }
}
exports.PayloadVecIndexErrorError = PayloadVecIndexErrorError;
createErrorFromCodeLookup.set(0x4, () => new PayloadVecIndexErrorError());
createErrorFromNameLookup.set('PayloadVecIndexError', () => new PayloadVecIndexErrorError());
class DerivedKeyInvalidError extends Error {
    constructor() {
        super('Derived key invalid');
        this.code = 0x5;
        this.name = 'DerivedKeyInvalid';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DerivedKeyInvalidError);
        }
    }
}
exports.DerivedKeyInvalidError = DerivedKeyInvalidError;
createErrorFromCodeLookup.set(0x5, () => new DerivedKeyInvalidError());
createErrorFromNameLookup.set('DerivedKeyInvalid', () => new DerivedKeyInvalidError());
class PayerIsNotSignerError extends Error {
    constructor() {
        super('Payer is not a signer');
        this.code = 0x6;
        this.name = 'PayerIsNotSigner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PayerIsNotSignerError);
        }
    }
}
exports.PayerIsNotSignerError = PayerIsNotSignerError;
createErrorFromCodeLookup.set(0x6, () => new PayerIsNotSignerError());
createErrorFromNameLookup.set('PayerIsNotSigner', () => new PayerIsNotSignerError());
class NotImplementedError extends Error {
    constructor() {
        super('Not implemented');
        this.code = 0x7;
        this.name = 'NotImplemented';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotImplementedError);
        }
    }
}
exports.NotImplementedError = NotImplementedError;
createErrorFromCodeLookup.set(0x7, () => new NotImplementedError());
createErrorFromNameLookup.set('NotImplemented', () => new NotImplementedError());
class BorshSerializationErrorError extends Error {
    constructor() {
        super('Borsh serialization error');
        this.code = 0x8;
        this.name = 'BorshSerializationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, BorshSerializationErrorError);
        }
    }
}
exports.BorshSerializationErrorError = BorshSerializationErrorError;
createErrorFromCodeLookup.set(0x8, () => new BorshSerializationErrorError());
createErrorFromNameLookup.set('BorshSerializationError', () => new BorshSerializationErrorError());
class BorshDeserializationErrorError extends Error {
    constructor() {
        super('Borsh deserialization error');
        this.code = 0x9;
        this.name = 'BorshDeserializationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, BorshDeserializationErrorError);
        }
    }
}
exports.BorshDeserializationErrorError = BorshDeserializationErrorError;
createErrorFromCodeLookup.set(0x9, () => new BorshDeserializationErrorError());
createErrorFromNameLookup.set('BorshDeserializationError', () => new BorshDeserializationErrorError());
class ValueOccupiedError extends Error {
    constructor() {
        super('Value in Payload or RuleSet is occupied');
        this.code = 0xa;
        this.name = 'ValueOccupied';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ValueOccupiedError);
        }
    }
}
exports.ValueOccupiedError = ValueOccupiedError;
createErrorFromCodeLookup.set(0xa, () => new ValueOccupiedError());
createErrorFromNameLookup.set('ValueOccupied', () => new ValueOccupiedError());
class DataIsEmptyError extends Error {
    constructor() {
        super('Account data is empty');
        this.code = 0xb;
        this.name = 'DataIsEmpty';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DataIsEmptyError);
        }
    }
}
exports.DataIsEmptyError = DataIsEmptyError;
createErrorFromCodeLookup.set(0xb, () => new DataIsEmptyError());
createErrorFromNameLookup.set('DataIsEmpty', () => new DataIsEmptyError());
class MessagePackSerializationErrorError extends Error {
    constructor() {
        super('MessagePack serialization error');
        this.code = 0xc;
        this.name = 'MessagePackSerializationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MessagePackSerializationErrorError);
        }
    }
}
exports.MessagePackSerializationErrorError = MessagePackSerializationErrorError;
createErrorFromCodeLookup.set(0xc, () => new MessagePackSerializationErrorError());
createErrorFromNameLookup.set('MessagePackSerializationError', () => new MessagePackSerializationErrorError());
class MessagePackDeserializationErrorError extends Error {
    constructor() {
        super('MessagePack deserialization error');
        this.code = 0xd;
        this.name = 'MessagePackDeserializationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MessagePackDeserializationErrorError);
        }
    }
}
exports.MessagePackDeserializationErrorError = MessagePackDeserializationErrorError;
createErrorFromCodeLookup.set(0xd, () => new MessagePackDeserializationErrorError());
createErrorFromNameLookup.set('MessagePackDeserializationError', () => new MessagePackDeserializationErrorError());
class MissingAccountError extends Error {
    constructor() {
        super('Missing account');
        this.code = 0xe;
        this.name = 'MissingAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MissingAccountError);
        }
    }
}
exports.MissingAccountError = MissingAccountError;
createErrorFromCodeLookup.set(0xe, () => new MissingAccountError());
createErrorFromNameLookup.set('MissingAccount', () => new MissingAccountError());
class MissingPayloadValueError extends Error {
    constructor() {
        super('Missing Payload value');
        this.code = 0xf;
        this.name = 'MissingPayloadValue';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MissingPayloadValueError);
        }
    }
}
exports.MissingPayloadValueError = MissingPayloadValueError;
createErrorFromCodeLookup.set(0xf, () => new MissingPayloadValueError());
createErrorFromNameLookup.set('MissingPayloadValue', () => new MissingPayloadValueError());
class RuleSetOwnerMismatchError extends Error {
    constructor() {
        super('RuleSet owner must be payer');
        this.code = 0x10;
        this.name = 'RuleSetOwnerMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, RuleSetOwnerMismatchError);
        }
    }
}
exports.RuleSetOwnerMismatchError = RuleSetOwnerMismatchError;
createErrorFromCodeLookup.set(0x10, () => new RuleSetOwnerMismatchError());
createErrorFromNameLookup.set('RuleSetOwnerMismatch', () => new RuleSetOwnerMismatchError());
class NameTooLongError extends Error {
    constructor() {
        super('Name too long');
        this.code = 0x11;
        this.name = 'NameTooLong';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NameTooLongError);
        }
    }
}
exports.NameTooLongError = NameTooLongError;
createErrorFromCodeLookup.set(0x11, () => new NameTooLongError());
createErrorFromNameLookup.set('NameTooLong', () => new NameTooLongError());
class OperationNotFoundError extends Error {
    constructor() {
        super('The operation retrieved is not in the selected RuleSet');
        this.code = 0x12;
        this.name = 'OperationNotFound';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, OperationNotFoundError);
        }
    }
}
exports.OperationNotFoundError = OperationNotFoundError;
createErrorFromCodeLookup.set(0x12, () => new OperationNotFoundError());
createErrorFromNameLookup.set('OperationNotFound', () => new OperationNotFoundError());
class RuleAuthorityIsNotSignerError extends Error {
    constructor() {
        super('Rule authority is not signer');
        this.code = 0x13;
        this.name = 'RuleAuthorityIsNotSigner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, RuleAuthorityIsNotSignerError);
        }
    }
}
exports.RuleAuthorityIsNotSignerError = RuleAuthorityIsNotSignerError;
createErrorFromCodeLookup.set(0x13, () => new RuleAuthorityIsNotSignerError());
createErrorFromNameLookup.set('RuleAuthorityIsNotSigner', () => new RuleAuthorityIsNotSignerError());
class UnsupportedRuleSetRevMapVersionError extends Error {
    constructor() {
        super('Unsupported RuleSet revision map version');
        this.code = 0x14;
        this.name = 'UnsupportedRuleSetRevMapVersion';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnsupportedRuleSetRevMapVersionError);
        }
    }
}
exports.UnsupportedRuleSetRevMapVersionError = UnsupportedRuleSetRevMapVersionError;
createErrorFromCodeLookup.set(0x14, () => new UnsupportedRuleSetRevMapVersionError());
createErrorFromNameLookup.set('UnsupportedRuleSetRevMapVersion', () => new UnsupportedRuleSetRevMapVersionError());
class UnsupportedRuleSetVersionError extends Error {
    constructor() {
        super('Unsupported RuleSet version');
        this.code = 0x15;
        this.name = 'UnsupportedRuleSetVersion';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnsupportedRuleSetVersionError);
        }
    }
}
exports.UnsupportedRuleSetVersionError = UnsupportedRuleSetVersionError;
createErrorFromCodeLookup.set(0x15, () => new UnsupportedRuleSetVersionError());
createErrorFromNameLookup.set('UnsupportedRuleSetVersion', () => new UnsupportedRuleSetVersionError());
class UnexpectedRuleSetFailureError extends Error {
    constructor() {
        super('Unexpected RuleSet failure');
        this.code = 0x16;
        this.name = 'UnexpectedRuleSetFailure';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnexpectedRuleSetFailureError);
        }
    }
}
exports.UnexpectedRuleSetFailureError = UnexpectedRuleSetFailureError;
createErrorFromCodeLookup.set(0x16, () => new UnexpectedRuleSetFailureError());
createErrorFromNameLookup.set('UnexpectedRuleSetFailure', () => new UnexpectedRuleSetFailureError());
class RuleSetRevisionNotAvailableError extends Error {
    constructor() {
        super('RuleSet revision not available');
        this.code = 0x17;
        this.name = 'RuleSetRevisionNotAvailable';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, RuleSetRevisionNotAvailableError);
        }
    }
}
exports.RuleSetRevisionNotAvailableError = RuleSetRevisionNotAvailableError;
createErrorFromCodeLookup.set(0x17, () => new RuleSetRevisionNotAvailableError());
createErrorFromNameLookup.set('RuleSetRevisionNotAvailable', () => new RuleSetRevisionNotAvailableError());
class AdditionalSignerCheckFailedError extends Error {
    constructor() {
        super('Additional Signer check failed');
        this.code = 0x18;
        this.name = 'AdditionalSignerCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AdditionalSignerCheckFailedError);
        }
    }
}
exports.AdditionalSignerCheckFailedError = AdditionalSignerCheckFailedError;
createErrorFromCodeLookup.set(0x18, () => new AdditionalSignerCheckFailedError());
createErrorFromNameLookup.set('AdditionalSignerCheckFailed', () => new AdditionalSignerCheckFailedError());
class PubkeyMatchCheckFailedError extends Error {
    constructor() {
        super('Pubkey Match check failed');
        this.code = 0x19;
        this.name = 'PubkeyMatchCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PubkeyMatchCheckFailedError);
        }
    }
}
exports.PubkeyMatchCheckFailedError = PubkeyMatchCheckFailedError;
createErrorFromCodeLookup.set(0x19, () => new PubkeyMatchCheckFailedError());
createErrorFromNameLookup.set('PubkeyMatchCheckFailed', () => new PubkeyMatchCheckFailedError());
class PubkeyListMatchCheckFailedError extends Error {
    constructor() {
        super('Pubkey List Match check failed');
        this.code = 0x1a;
        this.name = 'PubkeyListMatchCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PubkeyListMatchCheckFailedError);
        }
    }
}
exports.PubkeyListMatchCheckFailedError = PubkeyListMatchCheckFailedError;
createErrorFromCodeLookup.set(0x1a, () => new PubkeyListMatchCheckFailedError());
createErrorFromNameLookup.set('PubkeyListMatchCheckFailed', () => new PubkeyListMatchCheckFailedError());
class PubkeyTreeMatchCheckFailedError extends Error {
    constructor() {
        super('Pubkey Tree Match check failed');
        this.code = 0x1b;
        this.name = 'PubkeyTreeMatchCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PubkeyTreeMatchCheckFailedError);
        }
    }
}
exports.PubkeyTreeMatchCheckFailedError = PubkeyTreeMatchCheckFailedError;
createErrorFromCodeLookup.set(0x1b, () => new PubkeyTreeMatchCheckFailedError());
createErrorFromNameLookup.set('PubkeyTreeMatchCheckFailed', () => new PubkeyTreeMatchCheckFailedError());
class PDAMatchCheckFailedError extends Error {
    constructor() {
        super('PDA Match check failed');
        this.code = 0x1c;
        this.name = 'PDAMatchCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PDAMatchCheckFailedError);
        }
    }
}
exports.PDAMatchCheckFailedError = PDAMatchCheckFailedError;
createErrorFromCodeLookup.set(0x1c, () => new PDAMatchCheckFailedError());
createErrorFromNameLookup.set('PDAMatchCheckFailed', () => new PDAMatchCheckFailedError());
class ProgramOwnedCheckFailedError extends Error {
    constructor() {
        super('Program Owned check failed');
        this.code = 0x1d;
        this.name = 'ProgramOwnedCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProgramOwnedCheckFailedError);
        }
    }
}
exports.ProgramOwnedCheckFailedError = ProgramOwnedCheckFailedError;
createErrorFromCodeLookup.set(0x1d, () => new ProgramOwnedCheckFailedError());
createErrorFromNameLookup.set('ProgramOwnedCheckFailed', () => new ProgramOwnedCheckFailedError());
class ProgramOwnedListCheckFailedError extends Error {
    constructor() {
        super('Program Owned List check failed');
        this.code = 0x1e;
        this.name = 'ProgramOwnedListCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProgramOwnedListCheckFailedError);
        }
    }
}
exports.ProgramOwnedListCheckFailedError = ProgramOwnedListCheckFailedError;
createErrorFromCodeLookup.set(0x1e, () => new ProgramOwnedListCheckFailedError());
createErrorFromNameLookup.set('ProgramOwnedListCheckFailed', () => new ProgramOwnedListCheckFailedError());
class ProgramOwnedTreeCheckFailedError extends Error {
    constructor() {
        super('Program Owned Tree check failed');
        this.code = 0x1f;
        this.name = 'ProgramOwnedTreeCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProgramOwnedTreeCheckFailedError);
        }
    }
}
exports.ProgramOwnedTreeCheckFailedError = ProgramOwnedTreeCheckFailedError;
createErrorFromCodeLookup.set(0x1f, () => new ProgramOwnedTreeCheckFailedError());
createErrorFromNameLookup.set('ProgramOwnedTreeCheckFailed', () => new ProgramOwnedTreeCheckFailedError());
class AmountCheckFailedError extends Error {
    constructor() {
        super('Amount checked failed');
        this.code = 0x20;
        this.name = 'AmountCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AmountCheckFailedError);
        }
    }
}
exports.AmountCheckFailedError = AmountCheckFailedError;
createErrorFromCodeLookup.set(0x20, () => new AmountCheckFailedError());
createErrorFromNameLookup.set('AmountCheckFailed', () => new AmountCheckFailedError());
class FrequencyCheckFailedError extends Error {
    constructor() {
        super('Frequency check failed');
        this.code = 0x21;
        this.name = 'FrequencyCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, FrequencyCheckFailedError);
        }
    }
}
exports.FrequencyCheckFailedError = FrequencyCheckFailedError;
createErrorFromCodeLookup.set(0x21, () => new FrequencyCheckFailedError());
createErrorFromNameLookup.set('FrequencyCheckFailed', () => new FrequencyCheckFailedError());
class IsWalletCheckFailedError extends Error {
    constructor() {
        super('IsWallet check failed');
        this.code = 0x22;
        this.name = 'IsWalletCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, IsWalletCheckFailedError);
        }
    }
}
exports.IsWalletCheckFailedError = IsWalletCheckFailedError;
createErrorFromCodeLookup.set(0x22, () => new IsWalletCheckFailedError());
createErrorFromNameLookup.set('IsWalletCheckFailed', () => new IsWalletCheckFailedError());
class ProgramOwnedSetCheckFailedError extends Error {
    constructor() {
        super('Program Owned Set check failed');
        this.code = 0x23;
        this.name = 'ProgramOwnedSetCheckFailed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProgramOwnedSetCheckFailedError);
        }
    }
}
exports.ProgramOwnedSetCheckFailedError = ProgramOwnedSetCheckFailedError;
createErrorFromCodeLookup.set(0x23, () => new ProgramOwnedSetCheckFailedError());
createErrorFromNameLookup.set('ProgramOwnedSetCheckFailed', () => new ProgramOwnedSetCheckFailedError());
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
//# sourceMappingURL=index.js.map